#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('geolocalizacion:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Passport Config
 */
//require('../config/passport')(server)


/**
* Se establece la conexcion a la base de datod de Mongoose
**/

var mongoose = require("mongoose");
mongoose.connect("mongodb://joker:joaquinmo88@ds163417.mlab.com:63417/dbgeolocalizacion", (err, res) => {
  if(err){ return console.log(`Error al conectar la DB => ${err}`) }
  console.log("Conexcion a la base de datos establecida");
});


/**
 * Dependencies socket.io
 */
const io = require('socket.io')(server);
const Empleado = require('../models/empleados');

io.sockets.on('connection', function(socket){

  Empleado.find({}, (err, empleado) => {
     socket.emit('getEmpleados', empleado);
  });

  socket.on('room', function(room) {
    Empleado.find({'_id':room.id}, (err, empleado) => {
      var error = '';
      var status = 0;
      if(err == null && empleado == null){
        error = 'No se pudo establece comunicacion con el servidor. (Socket Room)'
      }else{
        error = false;
        status = 1;
      }
      socket.join(room.id);
      socket.broadcast.emit('empleado', { id: room.id, status: status, error: error } );
    });
  });

  socket.on('setCoordenadas', function(data){
		io.sockets.emit('getCoodenadas', data)
	});


	socket.on('sendDestino', function(data){
    console.log(data)
		io.sockets.in(data.id).emit('getDestino',data.destino);
		//io.broadcast.to(data.id).emit('getDestino',data.destino);
	});

	socket.on('sendMessage', function(data){
		io.sockets.in(data.id).emit('message','Este es el usuario tal ' + data.nombre);
	});

  socket.on('logout', function(id){
    var error = '';
    socket.broadcast.emit('empleado', { id: id, status: 0, error: error } );
  })

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
